{"version":3,"file":"src_app_features_album_album-list_album-list_module_ts.js","mappings":"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","sources":["./src/app/features/album/album-list/album-list-routing.module.ts","./src/app/features/album/album-list/album-list.module.ts","./src/app/features/album/album-list/components/filter/album-list-filter.component.ts","./src/app/features/album/album-list/components/filter/album-list-filter.component.html","./src/app/features/album/album-list/components/filter/container/album-list-filter-container.component.ts","./src/app/features/album/album-list/components/filter/container/album-list-filter-container.component.html","./src/app/features/album/album-list/components/list-item/album-list-item.component.ts","./src/app/features/album/album-list/components/list-item/album-list-item.component.html","./src/app/features/album/album-list/components/list/album-list.component.ts","./src/app/features/album/album-list/components/list/album-list.component.html","./src/app/features/album/album-list/components/page/album-list-page.component.ts","./src/app/features/album/album-list/components/page/album-list-page.component.html","./src/app/features/album/album-list/ngxs-store/album-list-photos.state.ts","./src/app/features/album/album-list/ngxs-store/album-list.state.ts","./src/app/features/album/album-list/ngxs-store/user-list.state.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AlbumListPageComponent } from './components/page/album-list-page.component';\n\nconst routes: Routes = [{ path: '', component: AlbumListPageComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AlbumListRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AlbumListRoutingModule } from './album-list-routing.module';\nimport { AlbumListPageComponent } from './components/page/album-list-page.component';\nimport { AlbumListComponent } from './components/list/album-list.component';\nimport { AlbumListFilterComponent } from './components/filter/album-list-filter.component';\nimport { SharedModule } from '../../../shared/shared.module';\nimport { AlbumListFilterContainerComponent } from './components/filter/container/album-list-filter-container.component';\nimport { AlbumListItemComponent } from './components/list-item/album-list-item.component';\nimport { NgxsModule } from '@ngxs/store';\nimport { AlbumListState } from './ngxs-store/album-list.state';\nimport { UserListState } from './ngxs-store/user-list.state';\nimport { AlbumListPhotosState } from './ngxs-store/album-list-photos.state';\n\n@NgModule({\n  declarations: [\n    AlbumListPageComponent,\n    AlbumListComponent,\n    AlbumListFilterComponent,\n    AlbumListFilterContainerComponent,\n    AlbumListItemComponent,\n  ],\n  imports: [\n    CommonModule,\n    AlbumListRoutingModule,\n    SharedModule,\n    NgxsModule.forFeature([AlbumListState, UserListState, AlbumListPhotosState]),\n  ],\n})\nexport class AlbumListModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  Output,\n  EventEmitter,\n  OnInit,\n} from '@angular/core';\nimport { User } from '../../../../../core/types/models/user';\nimport { PageRequestFilterField } from '../../../../../core/types/pagination/page-request';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { asyncScheduler, throttleTime } from 'rxjs';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\n\n@UntilDestroy()\n@Component({\n  selector: 'app-album-list-filter',\n  templateUrl: './album-list-filter.component.html',\n  styleUrls: ['./album-list-filter.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AlbumListFilterComponent implements OnInit {\n  @Input() users: User[] = [];\n\n  @Output() changeFilter = new EventEmitter<PageRequestFilterField[]>();\n\n  group = new FormGroup({\n    q: new FormControl(''),\n    userId: new FormControl('0'),\n  });\n\n  ngOnInit(): void {\n    this.group.valueChanges\n      .pipe(throttleTime(1000, asyncScheduler, { trailing: true }), untilDestroyed(this))\n      .subscribe((value) => {\n        const filter: PageRequestFilterField[] = [];\n        if (value.q) {\n          filter.push({\n            field: 'q',\n            value: value.q,\n          });\n        }\n        if (value.userId !== '0') {\n          filter.push({\n            field: 'userId',\n            value: value.userId,\n          });\n        }\n        this.changeFilter.emit(filter);\n      });\n  }\n\n  trackByUser(index: number, user: User): number {\n    return user.id;\n  }\n}\n","<form class=\"d-flex\" [formGroup]=\"group\">\n  <input formControlName=\"q\" class=\"form-control me-2\" placeholder=\"Search\">\n  <select formControlName=\"userId\" class=\"form-select\" aria-label=\"User filter\">\n    <option [value]=\"0\">Author</option>\n    <option [value]=\"user.id\" *ngFor=\"let user of users; trackBy: trackByUser\">{{user.name}}</option>\n  </select>\n</form>\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { User } from '../../../../../../core/types/models/user';\nimport {\n  PageRequest,\n  PageRequestFilterField,\n} from '../../../../../../core/types/pagination/page-request';\nimport { Select, Store } from '@ngxs/store';\nimport { UserListState } from '../../../ngxs-store/user-list.state';\nimport { AlbumListState } from '../../../ngxs-store/album-list.state';\nimport { AlbumActions } from '../../../../../../core/ngxs-store/actions/album.actions';\n\n@Component({\n  selector: 'app-album-list-filter-container',\n  templateUrl: './album-list-filter-container.component.html',\n  styleUrls: ['./album-list-filter-container.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AlbumListFilterContainerComponent {\n  @Select(UserListState.items) users$!: Observable<User[]>;\n\n  constructor(private store: Store) {}\n\n  changeFilter(filter: PageRequestFilterField[]): void {\n    const currentListRequest: PageRequest = this.store.selectSnapshot(AlbumListState).pageRequest;\n\n    this.store.dispatch(\n      new AlbumActions.GetAlbums({\n        ...currentListRequest,\n        page: {\n          number: 1,\n          size: currentListRequest.page!.size,\n        },\n        filter,\n      }),\n    );\n  }\n}\n","<app-album-list-filter\n  [users]=\"(users$ | async)!\"\n  (changeFilter)=\"changeFilter($event)\"\n></app-album-list-filter>\n","import { Component, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { Album } from '../../../../../core/types/models/album';\nimport { Photo } from '../../../../../core/types/models/photo';\n\n@Component({\n  selector: 'app-album-list-item',\n  templateUrl: './album-list-item.component.html',\n  styleUrls: ['./album-list-item.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AlbumListItemComponent {\n  @Input() album?: Album;\n\n  @Input() photos: Photo[] = [];\n\n  trackByPhoto(index: number, photo: Photo): number {\n    return photo.id;\n  }\n}\n","<div class=\"card text-center\" *ngIf=\"album\">\n  <div class=\"card-header\">\n    <a [routerLink]=\"['/', 'album', album.id]\">{{album.id}}. {{album.title}}</a>\n  </div>\n  <div class=\"card-body\">\n    <div class=\"album-photos d-flex\">\n      <a [routerLink]=\"['/', 'photo', photo.id]\" *ngFor=\"let photo of photos; trackBy: trackByPhoto\">\n        <img [src]=\"photo.thumbnailUrl\" [alt]=\"photo.title\">\n      </a>\n    </div>\n  </div>\n  <div class=\"card-footer text-muted\" *ngIf=\"album.user\">\n    By <a [routerLink]=\"['/', 'user', album.user.id]\">{{album.user.name}}</a>\n  </div>\n</div>\n","import { Component, ChangeDetectionStrategy, Input, EventEmitter, Output } from '@angular/core';\nimport { Album } from '../../../../../core/types/models/album';\nimport { ActionsExecuting } from '@ngxs-labs/actions-executing';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { Photo } from '../../../../../core/types/models/photo';\nimport { HashMap } from '../../../../../core/types/hash-map';\n\n@Component({\n  selector: 'app-album-list',\n  templateUrl: './album-list.component.html',\n  styleUrls: ['./album-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AlbumListComponent {\n  @Input() albums: Album[] = [];\n\n  @Input() groupedPhotos: HashMap<Photo[]> = {};\n\n  @Input() isLastPage = true;\n\n  @Input() loadInProcess: ActionsExecuting = null;\n\n  @Output() loadMore = new EventEmitter<void>();\n\n  faSpinner = faSpinner;\n\n  trackByAlbum(index: number, album: Album): number {\n    return album.id;\n  }\n}\n","<app-content-loading-status\n  [isEmpty]=\"!albums.length\"\n  [isLoading]=\"!!loadInProcess\"\n></app-content-loading-status>\n\n<div class=\"album-list d-flex flex-wrap\" infiniteScroll [infiniteScrollDisabled]=\"isLastPage\" (scrolled)=\"loadMore.emit()\">\n  <app-album-list-item [album]=\"album\"\n                       [photos]=\"groupedPhotos[album.id] || []\"\n                       *ngFor=\"let album of albums; trackBy: trackByAlbum\"\n  ></app-album-list-item>\n</div>\n\n<!-- Показываем нижний спиннер, когда подгружаются новые элементы бесконечным скроллом.\n @todo В ngIf не совсем точное условие, т.к. оно будет срабатывать и при запросах на фильтрацию и сортировку, но для демо подойдёт -->\n<div class=\"text-center\" *ngIf=\"!!loadInProcess && albums.length\">\n  <fa-icon [icon]=\"faSpinner\" [pulse]=\"true\" role=\"status\" data-testid=\"loading-spinner\">\n    <span class=\"sr-only\">Loading...</span>\n  </fa-icon>\n</div>\n","import { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { Breadcrumb } from '../../../../../shared/components/breadcrumbs/breadcrumbs.component';\nimport { Select, Store } from '@ngxs/store';\nimport { AlbumListState } from '../../ngxs-store/album-list.state';\nimport { Observable } from 'rxjs';\nimport { Album } from '../../../../../core/types/models/album';\nimport { PageRequest } from '../../../../../core/types/pagination/page-request';\nimport { ActionsExecuting, actionsExecuting } from '@ngxs-labs/actions-executing';\nimport { AlbumActions } from '../../../../../core/ngxs-store/actions/album.actions';\nimport { UserActions } from '../../../../../core/ngxs-store/actions/user.actions';\nimport { AlbumListPhotosState } from '../../ngxs-store/album-list-photos.state';\nimport { Photo } from '../../../../../core/types/models/photo';\nimport { HashMap } from '../../../../../core/types/hash-map';\n\n@Component({\n  selector: 'app-album-list-page',\n  templateUrl: './album-list-page.component.html',\n  styleUrls: ['./album-list-page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AlbumListPageComponent implements OnInit {\n  breadcrumbs: Breadcrumb[] = [\n    {\n      link: '',\n      text: 'Dashboard',\n    },\n    {\n      link: null,\n      text: 'Albums',\n    },\n  ];\n\n  @Select(AlbumListState.items) albums$!: Observable<Album[]>;\n\n  @Select(AlbumListState.isLastPage) isLastPage$!: Observable<boolean>;\n\n  @Select(actionsExecuting([AlbumActions.GetAlbums]))\n  loadInProcess$!: Observable<ActionsExecuting>;\n\n  @Select(AlbumListPhotosState.groupedPhotos) groupedPhotos$!: Observable<HashMap<Photo[]>>;\n\n  constructor(private store: Store) {}\n\n  ngOnInit(): void {\n    this.store.dispatch(\n      new AlbumActions.GetAlbums({\n        page: {\n          number: 1,\n          size: 28,\n        },\n      }),\n    );\n    this.store.dispatch(new UserActions.GetUsers({}));\n  }\n\n  loadMore(): void {\n    const currentPageRequest: PageRequest = this.store.selectSnapshot(AlbumListState).pageRequest;\n\n    this.store.dispatch(\n      new AlbumActions.GetAlbums({\n        ...currentPageRequest,\n        page: {\n          number: currentPageRequest.page!.number + 1,\n          size: currentPageRequest.page!.size,\n        },\n      }),\n    );\n  }\n}\n","<div class=\"container pt-3\">\n  <app-breadcrumbs [items]=\"breadcrumbs\"></app-breadcrumbs>\n  <h2>Albums</h2>\n\n  <app-album-list-filter-container class=\"d-block mb-2\"></app-album-list-filter-container>\n\n  <app-album-list\n    [albums]=\"(albums$ | async)!\"\n    [groupedPhotos]=\"(groupedPhotos$ | async)!\"\n    [isLastPage]=\"(isLastPage$ | async)!\"\n    [loadInProcess]=\"loadInProcess$ | async\"\n    (loadMore)=\"loadMore()\"\n  ></app-album-list>\n</div>\n","import { Injectable } from '@angular/core';\nimport { Action, Selector, State, StateContext } from '@ngxs/store';\nimport { PhotoActions } from '../../../../core/ngxs-store/actions/photo.actions';\nimport { NormalizedPhotoEntity } from '../../../../core/normalizr/types/models/normalized-photo-entity';\nimport {\n  EntitiesState,\n  EntitiesStateModel,\n} from '../../../../core/ngxs-store/state/entities.state';\nimport { Photo } from '../../../../core/types/models/photo';\nimport { photoSchema } from '../../../../core/normalizr/schemas/photo-schema';\nimport { denormalize } from 'normalizr';\nimport { HashMap } from '../../../../core/types/hash-map';\n\nexport interface AlbumListPhotosStateModel {\n  [albumId: string]: number[];\n}\n\nexport const albumListPhotosCount = 4;\n\n@State<AlbumListPhotosStateModel>({\n  name: 'albumPhotosList',\n  defaults: {},\n})\n@Injectable()\nexport class AlbumListPhotosState {\n  @Action(PhotoActions.GetPhotosSuccess)\n  getPhotos(ctx: StateContext<AlbumListPhotosStateModel>, action: PhotoActions.GetPhotosSuccess) {\n    const photos: NormalizedPhotoEntity[] = action.pageResult.items;\n\n    const newState: AlbumListPhotosStateModel = photos.reduce<AlbumListPhotosStateModel>(\n      (state, photo) => {\n        if (!state[photo.album]) {\n          state[photo.album] = [];\n        }\n        if (state[photo.album].length < albumListPhotosCount) {\n          state[photo.album].push(photo.id);\n        }\n        return state;\n      },\n      {},\n    );\n\n    ctx.setState({\n      ...ctx.getState(),\n      ...newState,\n    });\n  }\n\n  @Selector([AlbumListPhotosState, EntitiesState])\n  static groupedPhotos(\n    state: AlbumListPhotosStateModel,\n    entities: EntitiesStateModel,\n  ): HashMap<Photo[]> {\n    const res: HashMap<Photo[]> = {};\n    for (let albumId in state) {\n      res[albumId] = denormalize(state[albumId], [photoSchema], entities).filter(\n        (item: Photo) => !!item,\n      );\n    }\n    return res;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Action, Selector, State, StateContext } from '@ngxs/store';\nimport { denormalize } from 'normalizr';\nimport { albumSchema } from '../../../../core/normalizr/schemas/album-schema';\nimport {\n  EntitiesState,\n  EntitiesStateModel,\n} from '../../../../core/ngxs-store/state/entities.state';\nimport { Album } from '../../../../core/types/models/album';\nimport { PageResult } from '../../../../core/types/pagination/page-result';\nimport { AlbumActions } from '../../../../core/ngxs-store/actions/album.actions';\nimport { PhotoActions } from '../../../../core/ngxs-store/actions/photo.actions';\n\nexport type AlbumListStateModel = PageResult<number>;\n\n@State<AlbumListStateModel>({\n  name: 'albumList',\n  defaults: {\n    pageRequest: {},\n    totalCount: 0,\n    items: [],\n  },\n})\n@Injectable()\nexport class AlbumListState {\n  @Action(AlbumActions.GetAlbumsSuccess)\n  getAlbums(ctx: StateContext<AlbumListStateModel>, action: AlbumActions.GetAlbumsSuccess) {\n    const pageResult: PageResult<number> = action.data.result;\n\n    const state = ctx.getState();\n    ctx.setState({\n      ...pageResult,\n      items:\n        pageResult.pageRequest.page?.number === 1\n          ? pageResult.items\n          : [...state.items, ...pageResult.items],\n    });\n\n    // идея в том, что нужно запрашивать только фотки для полученных альбомов. Нам нужно только 4 фотки каждого альбома,\n    // но АПИ не позволяет нам задавать лимит для количества фоток для каждого альбома.\n    ctx.dispatch(\n      new PhotoActions.GetPhotos({\n        filter: pageResult.items.map((albumId) => ({ field: 'albumId', value: '' + albumId })),\n      }),\n    );\n  }\n\n  @Selector([AlbumListState, EntitiesState])\n  static items(state: AlbumListStateModel, entities: EntitiesStateModel): Album[] {\n    return denormalize(state.items, [albumSchema], entities).filter(\n      (item: Album | undefined) => !!item,\n    );\n  }\n\n  @Selector()\n  static isLastPage(state: AlbumListStateModel): boolean {\n    return state.totalCount === state.items.length;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Action, Selector, State, StateContext } from '@ngxs/store';\nimport { denormalize } from 'normalizr';\nimport { userSchema } from '../../../../core/normalizr/schemas/user-schema';\nimport {\n  EntitiesState,\n  EntitiesStateModel,\n} from '../../../../core/ngxs-store/state/entities.state';\nimport { User } from '../../../../core/types/models/user';\nimport { PageResult } from '../../../../core/types/pagination/page-result';\nimport { UserActions } from '../../../../core/ngxs-store/actions/user.actions';\n\nexport type UserListStateModel = number[];\n\n@State<UserListStateModel>({\n  name: 'userList',\n  defaults: [],\n})\n@Injectable()\nexport class UserListState {\n  @Action(UserActions.GetUsersSuccess)\n  getUsers(ctx: StateContext<UserListStateModel>, action: UserActions.GetUsersSuccess) {\n    const pageResult: PageResult<number> = action.data.result;\n\n    ctx.setState(pageResult.items);\n  }\n\n  @Selector([UserListState, EntitiesState])\n  static items(state: UserListState, entities: EntitiesStateModel): User[] {\n    return denormalize(state, [userSchema], entities).filter((item: User | undefined) => !!item);\n  }\n}\n"],"names":["EventEmitter","FormControl","FormGroup","asyncScheduler","throttleTime","UntilDestroy","untilDestroyed","i0","AlbumListFilterComponent","q","userId","ngOnInit","group","valueChanges","pipe","trailing","subscribe","value","filter","push","field","changeFilter","emit","trackByUser","index","user","id","selectors","inputs","users","outputs","decls","vars","consts","template","ctx","Select","UserListState","AlbumListState","AlbumActions","AlbumListFilterContainerComponent","constructor","store","currentListRequest","selectSnapshot","pageRequest","dispatch","GetAlbums","Object","page","number","size","__decorate","items","actionsExecuting","UserActions","AlbumListPhotosState","AlbumListPageComponent","link","text","GetUsers","loadMore","currentPageRequest","isLastPage","groupedPhotos"],"sourceRoot":"webpack:///"}