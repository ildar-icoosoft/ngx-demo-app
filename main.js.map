{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/core/core.module.ts","./src/app/core/ngrx-store/actions/current-action.actions.ts","./src/app/core/ngrx-store/actions/entity.actions.ts","./src/app/core/ngrx-store/actions/post.actions.ts","./src/app/core/ngrx-store/actions/user.actions.ts","./src/app/core/ngrx-store/decorators/end-of-action.ts","./src/app/core/ngrx-store/decorators/returns-normalized-data.ts","./src/app/core/ngrx-store/decorators/start-of-action.ts","./src/app/core/ngrx-store/effects/current-action.effects.ts","./src/app/core/ngrx-store/effects/entity.effects.ts","./src/app/core/ngrx-store/effects/post.effects.ts","./src/app/core/ngrx-store/effects/user.effects.ts","./src/app/core/ngrx-store/reducers/current-actions.reducer.ts","./src/app/core/ngrx-store/reducers/entities.reducer.ts","./src/app/core/ngrx-store/reducers/index.ts","./src/app/core/ngxs-store/actions/album.actions.ts","./src/app/core/ngxs-store/actions/entity.actions.ts","./src/app/core/ngxs-store/actions/photo.actions.ts","./src/app/core/ngxs-store/actions/user.actions.ts","./src/app/core/ngxs-store/state/entities.state.ts","./src/app/core/ngxs-store/state/entities/album-entities.state.ts","./src/app/core/ngxs-store/state/entities/photo-entities.state.ts","./src/app/core/ngxs-store/state/entities/user-entities.state.ts","./src/app/core/normalizr/schemas/album-schema.ts","./src/app/core/normalizr/schemas/photo-schema.ts","./src/app/core/normalizr/schemas/post-schema.ts","./src/app/core/normalizr/schemas/user-schema.ts","./src/app/core/services/api.service.ts","./src/app/core/utils/prepare-data.ts","./src/app/core/utils/url.ts","./src/app/layout/content-layout/content-layout.component.ts","./src/app/layout/content-layout/content-layout.component.html","./src/app/layout/nav/nav.component.ts","./src/app/layout/nav/nav.component.html","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ContentLayoutComponent } from './layout/content-layout/content-layout.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ContentLayoutComponent,\n    children: [\n      {\n        path: '',\n        loadChildren: () =>\n          import('./features/dashboard/dashboard.module').then((m) => m.DashboardModule),\n      },\n      {\n        path: 'post/:id',\n        loadChildren: () =>\n          import('./features/post/post-details/post-details.module').then(\n            (m) => m.PostDetailsModule,\n          ),\n      },\n      {\n        path: 'posts',\n        loadChildren: () =>\n          import('./features/post/post-list/post-list.module').then((m) => m.PostListModule),\n      },\n      {\n        path: 'albums',\n        loadChildren: () =>\n          import('./features/album/album-list/album-list.module').then((m) => m.AlbumListModule),\n      },\n      {\n        path: 'album/:id',\n        loadChildren: () =>\n          import('./features/photo/photo-list/album-photos/album-photos.module').then(\n            (m) => m.AlbumPhotosModule,\n          ),\n      },\n      {\n        path: 'photos',\n        loadChildren: () =>\n          import('./features/photo/photo-list/all-photos/all-photos.module').then(\n            (m) => m.AllPhotosModule,\n          ),\n      },\n      {\n        path: 'photo/:id',\n        loadChildren: () =>\n          import('./features/photo/photo-details/photo-details.module').then(\n            (m) => m.PhotoDetailsModule,\n          ),\n      },\n      {\n        path: 'user/:id',\n        loadChildren: () =>\n          import('./features/user/user-details/user-details.module').then(\n            (m) => m.UserDetailsModule,\n          ),\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {}\n","<router-outlet></router-outlet>\r\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ContentLayoutComponent } from './layout/content-layout/content-layout.component';\nimport { NavComponent } from './layout/nav/nav.component';\nimport { CoreModule } from './core/core.module';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [AppComponent, ContentLayoutComponent, NavComponent],\n  imports: [BrowserModule, HttpClientModule, AppRoutingModule, CoreModule],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StoreModule } from '@ngrx/store';\nimport { reducers, metaReducers, State } from './ngrx-store/reducers';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { environment } from '../../environments/environment';\nimport { EffectsModule } from '@ngrx/effects';\nimport { EntityEffects } from './ngrx-store/effects/entity.effects';\nimport { CurrentActionEffects } from './ngrx-store/effects/current-action.effects';\nimport { PostEffects } from './ngrx-store/effects/post.effects';\nimport { UserEffects } from './ngrx-store/effects/user.effects';\nimport { NgxsModule } from '@ngxs/store';\nimport { EntitiesState } from './ngxs-store/state/entities.state';\nimport { NgxsReduxDevtoolsPluginModule } from '@ngxs/devtools-plugin';\nimport { AlbumEntitiesState } from './ngxs-store/state/entities/album-entities.state';\nimport { UserEntitiesState } from './ngxs-store/state/entities/user-entities.state';\nimport { NgxsActionsExecutingModule } from '@ngxs-labs/actions-executing';\nimport { PhotoEntitiesState } from './ngxs-store/state/entities/photo-entities.state';\nimport { AkitaNgDevtools } from '@datorama/akita-ngdevtools';\nimport { AkitaNgRouterStoreModule } from '@datorama/akita-ng-router-store';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { enableAkitaProdMode } from '@datorama/akita';\nimport { StoreRouterConnectingModule } from '@ngrx/router-store';\n\nif (environment.production) {\n  enableAkitaProdMode();\n}\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    NgbModule,\n    NgxsModule.forRoot([EntitiesState, AlbumEntitiesState, UserEntitiesState, PhotoEntitiesState], {\n      developmentMode: !environment.production,\n      selectorOptions: {\n        // Такие значения рекомендуются в документации. И они будут дефолтными в NGXS 4\n        suppressErrors: false,\n        injectContainerState: false,\n      },\n    }),\n    environment.production ? [] : NgxsReduxDevtoolsPluginModule.forRoot({ name: 'NGXS demo' }),\n    NgxsActionsExecutingModule.forRoot(),\n    environment.production ? [] : AkitaNgDevtools.forRoot({ name: 'Akita demo' }),\n    AkitaNgRouterStoreModule,\n    // Ngrx нужно подключать после Akita, потому что иначе они будут конфликтовать в redux devtools\n    StoreModule.forRoot<State>(reducers, { metaReducers }),\n    StoreRouterConnectingModule.forRoot(),\n    !environment.production ? StoreDevtoolsModule.instrument({ name: 'NgRx demo' }) : [],\n    EffectsModule.forRoot([EntityEffects, CurrentActionEffects, PostEffects, UserEffects]),\n  ],\n})\nexport class CoreModule {}\n","import { Action } from '@ngrx/store';\n\nexport const START_ACTION = '[CurrentAction] StartAction';\n\nexport class StartAction implements Action {\n  readonly type = START_ACTION;\n\n  constructor(public startActionType: string) {}\n}\n\nexport const END_ACTION = '[CurrentAction] EndAction';\n\nexport class EndAction implements Action {\n  readonly type = END_ACTION;\n\n  constructor(public endActionType: string) {}\n}\n\nexport type CurrentActionAction = StartAction | EndAction;\n","import { Action } from '@ngrx/store';\nimport { Entities } from '../../normalizr/types/entites';\n\n/* GetEntities */\nexport const GET_ENTITIES_SUCCESS = '[Entity] GetEntitiesSuccess';\n\nexport class GetEntitiesSuccess implements Action {\n  readonly type = GET_ENTITIES_SUCCESS;\n\n  constructor(public entities: Partial<Entities>) {}\n}\n\nexport type EntityAction = GetEntitiesSuccess;\n","import { Action } from '@ngrx/store';\nimport { ReturnsNormalizedData } from '../decorators/returns-normalized-data';\nimport { StartOfAction } from '../decorators/start-of-action';\nimport { EndOfAction } from '../decorators/end-of-action';\nimport NormalizedData from '../../normalizr/types/normalized-data';\nimport { PageResult } from '../../types/pagination/page-result';\nimport { PageRequest } from '../../types/pagination/page-request';\nimport { ActionWithNormalizedData } from '../types/action-with-normalized-data';\n\n/* GetPosts */\nexport const GET_POSTS = '[Post] GetPosts';\nexport const GET_POSTS_SUCCESS = '[Post] GetPostsSuccess';\nexport const GET_POSTS_FAILED = '[Post] GetPostsFailed';\n\n@StartOfAction()\nexport class GetPosts implements Action {\n  readonly type = GET_POSTS;\n\n  constructor(public pageRequest: PageRequest) {}\n}\n\n@EndOfAction(GET_POSTS)\n@ReturnsNormalizedData()\nexport class GetPostsSuccess implements ActionWithNormalizedData {\n  readonly type = GET_POSTS_SUCCESS;\n\n  constructor(public data: NormalizedData<PageResult<number>>) {}\n}\n\n@EndOfAction(GET_POSTS)\nexport class GetPostsFailed implements Action {\n  readonly type = GET_POSTS_FAILED;\n\n  constructor(public error: any) {}\n}\n\n/* GetSinglePost */\nexport const GET_SINGLE_POST = '[Post] GetSinglePost';\nexport const GET_SINGLE_POST_SUCCESS = '[Post] GetSinglePostSuccess';\nexport const GET_SINGLE_POST_FAILED = '[Post] GetSinglePostFailed';\n\n@StartOfAction()\nexport class GetSinglePost implements Action {\n  readonly type = GET_SINGLE_POST;\n\n  constructor(public id: number) {}\n}\n\n@EndOfAction(GET_SINGLE_POST)\n@ReturnsNormalizedData()\nexport class GetSinglePostSuccess implements ActionWithNormalizedData {\n  readonly type = GET_SINGLE_POST_SUCCESS;\n\n  constructor(public data: NormalizedData<number>) {}\n}\n\n@EndOfAction(GET_SINGLE_POST)\nexport class GetSinglePostFailed implements Action {\n  readonly type = GET_SINGLE_POST_FAILED;\n\n  constructor(public error: any) {}\n}\n\nexport type PostAction =\n  | GetPosts\n  | GetPostsSuccess\n  | GetPostsFailed\n  | GetSinglePost\n  | GetSinglePostSuccess\n  | GetSinglePostFailed;\n","import { StartOfAction } from '../decorators/start-of-action';\nimport { Action } from '@ngrx/store';\nimport { EndOfAction } from '../decorators/end-of-action';\nimport { ReturnsNormalizedData } from '../decorators/returns-normalized-data';\nimport NormalizedData from '../../normalizr/types/normalized-data';\nimport { PageResult } from '../../types/pagination/page-result';\nimport { ActionWithNormalizedData } from '../types/action-with-normalized-data';\n\n/* GetUsers */\nexport const GET_USERS = '[User] GetUsers';\nexport const GET_USERS_SUCCESS = '[User] GetUsersSuccess';\nexport const GET_USERS_FAILED = '[User] GetUsersFailed';\n\n@StartOfAction()\nexport class GetUsers implements Action {\n  readonly type = GET_USERS;\n}\n\n@EndOfAction(GET_USERS)\n@ReturnsNormalizedData()\nexport class GetUsersSuccess implements ActionWithNormalizedData {\n  readonly type = GET_USERS_SUCCESS;\n\n  constructor(public data: NormalizedData<PageResult<number>>) {}\n}\n\n@EndOfAction(GET_USERS)\nexport class GetUsersFailed implements Action {\n  readonly type = GET_USERS_FAILED;\n\n  constructor(public error: any) {}\n}\n\nexport type UserAction = GetUsers | GetUsersSuccess | GetUsersFailed;\n","export function EndOfAction(actionType: string) {\n  return function (Class: Function) {\n    Object.defineProperty(Class.prototype, 'triggeredAction', {\n      value: actionType,\n    });\n  };\n}\n","export function ReturnsNormalizedData() {\n  return function (Class: Function) {\n    Object.defineProperty(Class.prototype, 'containsNormalizedData', {\n      value: true,\n    });\n  };\n}\n","export function StartOfAction() {\n  return function (Class: Function) {\n    Object.defineProperty(Class.prototype, 'actionIsStarted', {\n      value: true,\n    });\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect } from '@ngrx/effects';\nimport { filter, map } from 'rxjs';\nimport { EndAction, StartAction } from '../actions/current-action.actions';\nimport { Action } from '@ngrx/store';\n\n@Injectable()\nexport class CurrentActionEffects {\n  startAction$ = createEffect(() =>\n    this.actions$.pipe(\n      filter((action: any) => !!action.actionIsStarted),\n      map((action: Action) => new StartAction(action.type)),\n    ),\n  );\n\n  endAction$ = createEffect(() =>\n    this.actions$.pipe(\n      filter((action: any) => !!action.triggeredAction),\n      map((action: any) => new EndAction(action.triggeredAction)),\n    ),\n  );\n\n  constructor(private actions$: Actions) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect } from '@ngrx/effects';\nimport { filter, map } from 'rxjs';\nimport { GetEntitiesSuccess } from '../actions/entity.actions';\nimport { ActionWithNormalizedData } from '../types/action-with-normalized-data';\n\n@Injectable()\nexport class EntityEffects {\n  getEntitiesSuccess$ = createEffect(() =>\n    this.actions$.pipe(\n      filter((action: any) => !!action.containsNormalizedData),\n      map((action: ActionWithNormalizedData) => new GetEntitiesSuccess(action.data.entities)),\n    ),\n  );\n\n  constructor(private actions$: Actions) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { catchError, map, of, switchMap } from 'rxjs';\nimport { ApiService } from '../../services/api.service';\nimport { normalize } from 'normalizr';\nimport { postListSchema, postSchema } from '../../normalizr/schemas/post-schema';\nimport NormalizedData from '../../normalizr/types/normalized-data';\nimport * as postActions from '../actions/post.actions';\nimport { PageResult } from '../../types/pagination/page-result';\nimport { GetPosts, GetSinglePost } from '../actions/post.actions';\n\n@Injectable()\nexport class PostEffects {\n  getPosts$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(postActions.GET_POSTS),\n      switchMap((action: GetPosts) =>\n        this.api.getPosts(action.pageRequest).pipe(\n          map((pageResult) => normalize(pageResult, postListSchema)),\n          map((data: NormalizedData<PageResult<number>>) => new postActions.GetPostsSuccess(data)),\n          catchError((error) => of(new postActions.GetPostsFailed(error))),\n        ),\n      ),\n    ),\n  );\n\n  getSinglePost$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(postActions.GET_SINGLE_POST),\n      switchMap((action: GetSinglePost) =>\n        this.api.getSinglePost(action.id).pipe(\n          map((post) => normalize(post, postSchema)),\n          map((data: NormalizedData<number>) => new postActions.GetSinglePostSuccess(data)),\n          catchError((error) => of(new postActions.GetSinglePostFailed(error))),\n        ),\n      ),\n    ),\n  );\n\n  constructor(private actions$: Actions, private api: ApiService) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { catchError, map, of, switchMap } from 'rxjs';\nimport { normalize } from 'normalizr';\nimport NormalizedData from '../../normalizr/types/normalized-data';\nimport { ApiService } from '../../services/api.service';\nimport * as userActions from '../actions/user.actions';\nimport { userListSchema } from '../../normalizr/schemas/user-schema';\nimport { PageResult } from '../../types/pagination/page-result';\n\n@Injectable()\nexport class UserEffects {\n  getUsers$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(userActions.GET_USERS),\n      switchMap(() =>\n        this.api.getUsers({}).pipe(\n          map((pageResult) => normalize(pageResult, userListSchema)),\n          map((data: NormalizedData<PageResult<number>>) => new userActions.GetUsersSuccess(data)),\n          catchError((error) => of(new userActions.GetUsersFailed(error))),\n        ),\n      ),\n    ),\n  );\n\n  constructor(private actions$: Actions, private api: ApiService) {}\n}\n","import {\n  END_ACTION,\n  EndAction,\n  START_ACTION,\n  StartAction,\n} from '../actions/current-action.actions';\nimport { Action } from '@ngrx/store';\n\nexport const currentActionsFeatureKey = 'currentActions';\n\nexport type CurrentActionsState = string[];\n\nexport const initialState: CurrentActionsState = [];\n\n// eslint-disable-next-line @typescript-eslint/default-param-last\nexport function reducer(state = initialState, action: Action): string[] {\n  switch (action.type) {\n    case START_ACTION:\n      const startAction = action as StartAction;\n      return [...state, startAction.startActionType];\n\n    case END_ACTION:\n      const endAction = action as EndAction;\n      return state.filter((item) => item !== endAction.endActionType);\n\n    default:\n      return state;\n  }\n}\n","import * as entityActions from '../actions/entity.actions';\nimport { NormalizedUserEntity } from '../../normalizr/types/models/normalized-user-entity';\nimport { NormalizedPostEntity } from '../../normalizr/types/models/normalized-post-entity';\nimport { Action } from '@ngrx/store';\nimport { EntityAction } from '../actions/entity.actions';\nimport { HashMap } from '../../types/hash-map';\n\nexport const entitiesFeatureKey = 'entities';\n\nexport interface EntitiesState {\n  users: HashMap<NormalizedUserEntity>;\n  posts: HashMap<NormalizedPostEntity>;\n}\n\nexport const initialState: EntitiesState = {\n  users: {},\n  posts: {},\n};\n\n// eslint-disable-next-line @typescript-eslint/default-param-last\nexport function reducer(state = initialState, action: Action): EntitiesState {\n  switch (action.type) {\n    case entityActions.GET_ENTITIES_SUCCESS:\n      const getEntityAction = action as EntityAction;\n      return {\n        users: Object.assign({}, state.users, getEntityAction.entities['users']),\n        posts: Object.assign({}, state.posts, getEntityAction.entities['posts']),\n      };\n\n    default:\n      return state;\n  }\n}\n","import { ActionReducerMap, MetaReducer } from '@ngrx/store';\nimport * as fromRouter from '@ngrx/router-store';\nimport { environment } from '../../../../environments/environment';\nimport * as fromEntities from './entities.reducer';\nimport * as fromCurrentActions from './current-actions.reducer';\n\nexport interface State {\n  router: fromRouter.RouterReducerState<any>;\n  [fromEntities.entitiesFeatureKey]: fromEntities.EntitiesState;\n  [fromCurrentActions.currentActionsFeatureKey]: fromCurrentActions.CurrentActionsState;\n}\n\nexport const reducers: ActionReducerMap<State> = {\n  router: fromRouter.routerReducer,\n  [fromEntities.entitiesFeatureKey]: fromEntities.reducer,\n  [fromCurrentActions.currentActionsFeatureKey]: fromCurrentActions.reducer,\n};\n\nexport const metaReducers: MetaReducer<State>[] = !environment.production ? [] : [];\n","import { PageRequest } from '../../types/pagination/page-request';\nimport NormalizedData from '../../normalizr/types/normalized-data';\nimport { PageResult } from '../../types/pagination/page-result';\nimport { ReturnsNormalizedData } from '../../ngrx-store/decorators/returns-normalized-data';\n\nexport namespace AlbumActions {\n  export class GetAlbums {\n    static readonly type = '[Album] GetAlbums';\n\n    constructor(public pageRequest: PageRequest) {}\n  }\n\n  @ReturnsNormalizedData()\n  export class GetAlbumsSuccess {\n    static readonly type = '[Album] GetAlbumsSuccess';\n\n    constructor(public data: NormalizedData<PageResult<number>>) {}\n  }\n}\n","import { Entities } from '../../normalizr/types/entites';\n\nexport namespace EntityActions {\n  export class GetEntitiesSuccess {\n    static readonly type = '[Entity] GetEntitiesSuccess';\n\n    constructor(public entities: Partial<Entities>) {}\n  }\n}\n","import { PageRequest } from '../../types/pagination/page-request';\nimport { ReturnsNormalizedData } from '../../ngrx-store/decorators/returns-normalized-data';\nimport NormalizedData from '../../normalizr/types/normalized-data';\nimport { PageResult } from '../../types/pagination/page-result';\nimport { NormalizedPhotoEntity } from '../../normalizr/types/models/normalized-photo-entity';\n\nexport namespace PhotoActions {\n  export class GetPhotos {\n    static readonly type = '[Photo] GetPhotos';\n\n    constructor(public pageRequest: PageRequest) {}\n  }\n\n  @ReturnsNormalizedData()\n  export class GetPhotosSuccess {\n    static readonly type = '[Photo] GetPhotosSuccess';\n\n    constructor(\n      public data: NormalizedData<PageResult<number>>,\n      public pageResult: PageResult<NormalizedPhotoEntity>,\n    ) {}\n  }\n}\n","import { PageRequest } from '../../types/pagination/page-request';\nimport { ReturnsNormalizedData } from '../../ngrx-store/decorators/returns-normalized-data';\nimport NormalizedData from '../../normalizr/types/normalized-data';\nimport { PageResult } from '../../types/pagination/page-result';\n\nexport namespace UserActions {\n  export class GetUsers {\n    static readonly type = '[User] GetUsers';\n\n    constructor(public pageRequest: PageRequest) {}\n  }\n\n  @ReturnsNormalizedData()\n  export class GetUsersSuccess {\n    static readonly type = '[User] GetUsersSuccess';\n\n    constructor(public data: NormalizedData<PageResult<number>>) {}\n  }\n}\n","import { Actions, State, Store } from '@ngxs/store';\nimport { Injectable } from '@angular/core';\nimport { AlbumEntitiesState } from './entities/album-entities.state';\nimport { UserEntitiesState } from './entities/user-entities.state';\nimport { filter } from 'rxjs';\nimport { ActionWithNormalizedData } from '../../ngrx-store/types/action-with-normalized-data';\nimport { ActionStatus } from '../types/action-status';\nimport { ActionContext } from '../types/action-context';\nimport { NormalizedUserEntity } from '../../normalizr/types/models/normalized-user-entity';\nimport { NormalizedPostEntity } from '../../normalizr/types/models/normalized-post-entity';\nimport { EntityActions } from '../actions/entity.actions';\nimport { NormalizedPhotoEntity } from '../../normalizr/types/models/normalized-photo-entity';\nimport { PhotoEntitiesState } from './entities/photo-entities.state';\nimport { HashMap } from '../../types/hash-map';\n\nexport type EntitiesStateModel = {\n  users: HashMap<NormalizedUserEntity>;\n  posts: HashMap<NormalizedPostEntity>;\n  photos: HashMap<NormalizedPhotoEntity>;\n};\n\n// в generic не указываю EntitiesStateModel, т.к. тогда компилятор ругается на пустой defaults\n@State<{}>({\n  name: 'entities',\n  defaults: {},\n  children: [AlbumEntitiesState, UserEntitiesState, PhotoEntitiesState],\n})\n@Injectable()\nexport class EntitiesState {\n  constructor(private store: Store, private actions$: Actions) {\n    this.actions$\n      .pipe(\n        filter((actionContext: ActionContext) => {\n          return (\n            !!actionContext.action.containsNormalizedData &&\n            actionContext.status === ActionStatus.Successful\n          );\n        }),\n      )\n      .subscribe((actionContext: ActionContext<ActionWithNormalizedData>) => {\n        this.store.dispatch(\n          new EntityActions.GetEntitiesSuccess(actionContext.action.data.entities),\n        );\n      });\n  }\n}\n","import { Action, State, StateContext } from '@ngxs/store';\nimport { Injectable } from '@angular/core';\nimport { ApiService } from '../../../services/api.service';\nimport { Observable, tap } from 'rxjs';\nimport { PageResult } from '../../../types/pagination/page-result';\nimport { normalize } from 'normalizr';\nimport { albumListSchema } from '../../../normalizr/schemas/album-schema';\nimport { NormalizedAlbumEntity } from '../../../normalizr/types/models/normalized-album-entity';\nimport NormalizedData from '../../../normalizr/types/normalized-data';\nimport { EntityActions } from '../../actions/entity.actions';\nimport { AlbumActions } from '../../actions/album.actions';\nimport { HashMap } from '../../../types/hash-map';\n\nexport type AlbumEntitiesStateModel = HashMap<NormalizedAlbumEntity>;\n\n@State<AlbumEntitiesStateModel>({\n  name: 'albums',\n  defaults: {},\n})\n@Injectable()\nexport class AlbumEntitiesState {\n  constructor(private api: ApiService) {}\n\n  @Action(AlbumActions.GetAlbums)\n  getAlbums(\n    ctx: StateContext<AlbumEntitiesStateModel>,\n    action: AlbumActions.GetAlbums,\n  ): Observable<PageResult<NormalizedAlbumEntity>> {\n    return this.api.getAlbums(action.pageRequest).pipe(\n      tap((result: PageResult<NormalizedAlbumEntity>) => {\n        const normalizedData: NormalizedData<PageResult<number>> = normalize(\n          result,\n          albumListSchema,\n        );\n\n        ctx.dispatch(new AlbumActions.GetAlbumsSuccess(normalizedData));\n      }),\n    );\n  }\n\n  @Action(EntityActions.GetEntitiesSuccess)\n  getEntitiesSuccess(\n    ctx: StateContext<AlbumEntitiesStateModel>,\n    action: EntityActions.GetEntitiesSuccess,\n  ): void {\n    if (action.entities['albums']) {\n      ctx.setState({\n        ...ctx.getState(),\n        ...(action.entities['albums'] as HashMap<NormalizedAlbumEntity>),\n      });\n    }\n  }\n}\n","import { Action, State, StateContext } from '@ngxs/store';\nimport { Injectable } from '@angular/core';\nimport { ApiService } from '../../../services/api.service';\nimport { Observable, tap } from 'rxjs';\nimport { PageResult } from '../../../types/pagination/page-result';\nimport { normalize } from 'normalizr';\nimport NormalizedData from '../../../normalizr/types/normalized-data';\nimport { EntityActions } from '../../actions/entity.actions';\nimport { NormalizedPhotoEntity } from '../../../normalizr/types/models/normalized-photo-entity';\nimport { PhotoActions } from '../../actions/photo.actions';\nimport { photoListSchema } from '../../../normalizr/schemas/photo-schema';\nimport { HashMap } from '../../../types/hash-map';\n\nexport interface PhotoEntitiesStateModel {\n  [id: string]: NormalizedPhotoEntity;\n}\n\n@State<PhotoEntitiesStateModel>({\n  name: 'photos',\n  defaults: {},\n})\n@Injectable()\nexport class PhotoEntitiesState {\n  constructor(private api: ApiService) {}\n\n  @Action(PhotoActions.GetPhotos)\n  getPhotos(\n    ctx: StateContext<PhotoEntitiesStateModel>,\n    action: PhotoActions.GetPhotos,\n  ): Observable<PageResult<NormalizedPhotoEntity>> {\n    return this.api.getPhotos(action.pageRequest).pipe(\n      tap((result: PageResult<NormalizedPhotoEntity>) => {\n        const normalizedData: NormalizedData<PageResult<number>> = normalize(\n          result,\n          photoListSchema,\n        );\n\n        ctx.dispatch(new PhotoActions.GetPhotosSuccess(normalizedData, result));\n      }),\n    );\n  }\n\n  @Action(EntityActions.GetEntitiesSuccess)\n  getEntitiesSuccess(\n    ctx: StateContext<PhotoEntitiesStateModel>,\n    action: EntityActions.GetEntitiesSuccess,\n  ): void {\n    if (action.entities['photos']) {\n      ctx.setState({\n        ...ctx.getState(),\n        ...(action.entities['photos'] as HashMap<NormalizedPhotoEntity>),\n      });\n    }\n  }\n}\n","import { Action, State, StateContext } from '@ngxs/store';\nimport { Injectable } from '@angular/core';\nimport { NormalizedUserEntity } from '../../../normalizr/types/models/normalized-user-entity';\nimport { NormalizedAlbumEntity } from '../../../normalizr/types/models/normalized-album-entity';\nimport { AlbumEntitiesStateModel } from './album-entities.state';\nimport { Observable, tap } from 'rxjs';\nimport { PageResult } from '../../../types/pagination/page-result';\nimport NormalizedData from '../../../normalizr/types/normalized-data';\nimport { normalize } from 'normalizr';\nimport { UserActions } from '../../actions/user.actions';\nimport { User } from '../../../types/models/user';\nimport { ApiService } from '../../../services/api.service';\nimport { userListSchema } from '../../../normalizr/schemas/user-schema';\nimport { AlbumActions } from '../../actions/album.actions';\nimport { EntityActions } from '../../actions/entity.actions';\nimport { HashMap } from '../../../types/hash-map';\n\nexport interface UserEntitiesStateModel {\n  [id: string]: NormalizedUserEntity;\n}\n\n@State<UserEntitiesStateModel>({\n  name: 'users',\n  defaults: {},\n})\n@Injectable()\nexport class UserEntitiesState {\n  constructor(private api: ApiService) {}\n\n  @Action(UserActions.GetUsers)\n  getUsers(\n    ctx: StateContext<UserEntitiesStateModel>,\n    action: AlbumActions.GetAlbums,\n  ): Observable<PageResult<User>> {\n    return this.api.getUsers(action.pageRequest).pipe(\n      tap((result: PageResult<User>) => {\n        const normalizedData: NormalizedData<PageResult<number>> = normalize(\n          result,\n          userListSchema,\n        );\n\n        ctx.dispatch(new UserActions.GetUsersSuccess(normalizedData));\n      }),\n    );\n  }\n\n  @Action(EntityActions.GetEntitiesSuccess)\n  getEntitiesSuccess(\n    ctx: StateContext<AlbumEntitiesStateModel>,\n    action: EntityActions.GetEntitiesSuccess,\n  ): void {\n    if (action.entities['users']) {\n      ctx.setState({\n        ...ctx.getState(),\n        ...(action.entities['users'] as HashMap<NormalizedAlbumEntity>),\n      });\n    }\n  }\n}\n","import { schema } from 'normalizr';\nimport { userSchema } from './user-schema';\n\nexport const albumSchema = new schema.Entity('albums', {\n  user: userSchema,\n});\n\nexport const albumListSchema = {\n  items: [albumSchema],\n};\n","import { schema } from 'normalizr';\nimport { albumSchema } from './album-schema';\n\nexport const photoSchema = new schema.Entity('photos', {\n  album: albumSchema,\n});\n\nexport const photoListSchema = {\n  items: [photoSchema],\n};\n","import { schema } from 'normalizr';\nimport { userSchema } from './user-schema';\n\nexport const postSchema = new schema.Entity('posts', {\n  user: userSchema,\n});\n\nexport const postListSchema = {\n  items: [postSchema],\n};\n","import { schema } from 'normalizr';\n\nexport const userSchema = new schema.Entity('users');\n\nexport const userListSchema = {\n  items: [userSchema],\n};\n","import { Injectable } from '@angular/core';\nimport { PageResult } from '../types/pagination/page-result';\nimport { HttpClient } from '@angular/common/http';\nimport { map, Observable } from 'rxjs';\nimport { PageRequest } from '../types/pagination/page-request';\nimport { prepareAlbum, preparePhoto, preparePost } from '../utils/prepare-data';\nimport { pageRequestToString } from '../utils/url';\nimport { NormalizedAlbumEntity } from '../normalizr/types/models/normalized-album-entity';\nimport { NormalizedPostEntity } from '../normalizr/types/models/normalized-post-entity';\nimport { NormalizedPhotoEntity } from '../normalizr/types/models/normalized-photo-entity';\nimport { NormalizedUserEntity } from '../normalizr/types/models/normalized-user-entity';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiService {\n  constructor(private http: HttpClient) {}\n\n  getPosts(pageRequest: PageRequest): Observable<PageResult<NormalizedPostEntity>> {\n    return this.http\n      .get<any>('https://jsonplaceholder.typicode.com/posts?' + pageRequestToString(pageRequest), {\n        observe: 'response',\n      })\n      .pipe(\n        map((response) => {\n          return {\n            pageRequest,\n            totalCount: Number(response.headers.get('x-total-count')),\n            items: response.body.map(preparePost),\n          };\n        }),\n      );\n  }\n\n  getSinglePost(id: number): Observable<NormalizedPostEntity> {\n    return this.http\n      .get<any>(`https://jsonplaceholder.typicode.com/posts/${id}`)\n      .pipe(map((post) => preparePost(post)));\n  }\n\n  getUsers(pageRequest: PageRequest): Observable<PageResult<NormalizedUserEntity>> {\n    return this.http\n      .get<any>('https://jsonplaceholder.typicode.com/users' + pageRequestToString(pageRequest), {\n        observe: 'response',\n      })\n      .pipe(\n        map((response) => {\n          return {\n            pageRequest,\n            totalCount: Number(response.headers.get('x-total-count')),\n            items: response.body,\n          };\n        }),\n      );\n  }\n\n  getUser(userId: number): Observable<NormalizedUserEntity> {\n    return this.http.get<any>(`https://jsonplaceholder.typicode.com/users/${userId}`);\n  }\n\n  getAlbums(pageRequest: PageRequest): Observable<PageResult<NormalizedAlbumEntity>> {\n    return this.http\n      .get<any>('https://jsonplaceholder.typicode.com/albums?' + pageRequestToString(pageRequest), {\n        observe: 'response',\n      })\n      .pipe(\n        map((response) => {\n          return {\n            pageRequest,\n            totalCount: Number(response.headers.get('x-total-count')),\n            items: response.body.map(prepareAlbum),\n          };\n        }),\n      );\n  }\n\n  getSingleAlbum(id: number): Observable<NormalizedAlbumEntity> {\n    return this.http\n      .get<any>(`https://jsonplaceholder.typicode.com/albums/${id}`)\n      .pipe(map((post) => prepareAlbum(post)));\n  }\n\n  getPhotos(pageRequest: PageRequest): Observable<PageResult<NormalizedPhotoEntity>> {\n    return this.http\n      .get<any>('https://jsonplaceholder.typicode.com/photos?' + pageRequestToString(pageRequest), {\n        observe: 'response',\n      })\n      .pipe(\n        map((response) => {\n          return {\n            pageRequest,\n            totalCount: Number(response.headers.get('x-total-count')),\n            items: response.body.map(preparePhoto),\n          };\n        }),\n      );\n  }\n\n  getSinglePhoto(id: number): Observable<NormalizedPhotoEntity> {\n    return this.http\n      .get<any>(`https://jsonplaceholder.typicode.com/photos/${id}`)\n      .pipe(map((post) => preparePhoto(post)));\n  }\n}\n","// функции немного меняют формат данных, которые приходят с бэка. Например переименовывают userId в user.\n// Это нужно для нашего механизма нормализации. После денормализации в этом свойстве будет объект User\n\nexport const preparePost = (post: any) => {\n  post.user = post.userId;\n  delete post.userId;\n  return post;\n};\n\nexport const prepareAlbum = (album: any) => {\n  album.user = album.userId;\n  delete album.userId;\n  return album;\n};\n\nexport const preparePhoto = (photo: any) => {\n  photo.album = photo.albumId;\n  delete photo.albumId;\n  return photo;\n};\n","import { HttpParams } from '@angular/common/http';\nimport { PageRequest } from '../types/pagination/page-request';\nimport { HashMap } from '../types/hash-map';\n\n/**\n * Формирует объект запроса списка элементов из бэкэнд сервиса jsonplaceholder typicode\n * @param pageRequest\n */\nexport const buildQueryParamsForPageRequest = (pageRequest: PageRequest): HashMap<any> => {\n  const queryParams: HashMap<any> = {};\n  if (pageRequest.page) {\n    queryParams['_page'] = pageRequest.page.number;\n    queryParams['_limit'] = pageRequest.page.size;\n  }\n  if (pageRequest.sort) {\n    queryParams['_sort'] = pageRequest.sort.field;\n    queryParams['_order'] = pageRequest.sort.direction;\n  }\n\n  if (pageRequest.filter) {\n    pageRequest.filter.forEach((filterItem) => {\n      if (!queryParams[filterItem.field]) queryParams[filterItem.field] = [];\n      queryParams[filterItem.field].push(filterItem.value);\n    });\n  }\n\n  return queryParams;\n};\n\n/**\n * Формирует строку запроса списка элементов из бэкэнд сервиса jsonplaceholder typicode\n * @param pageRequest\n */\nexport const pageRequestToString = (pageRequest: PageRequest): string => {\n  const queryParams: HashMap<any> = buildQueryParamsForPageRequest(pageRequest);\n\n  let httpParams = new HttpParams({ fromObject: queryParams });\n  return httpParams.toString();\n};\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'app-content-layout',\n  templateUrl: './content-layout.component.html',\n  styleUrls: ['./content-layout.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ContentLayoutComponent {}\n","<div class=\"d-flex\">\n  <div class=\"left-col p-3 min-vh-100\">\n    <h1 class=\"h5\">My app</h1>\n    <app-nav></app-nav>\n  </div>\n  <div class=\"col\">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'app-nav',\n  templateUrl: './nav.component.html',\n  styleUrls: ['./nav.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavComponent {}\n","<nav class=\"nav nav-pills flex-column\">\r\n  <a class=\"nav-link\" [routerLink]=\"''\" routerLinkActive=\"active\"\r\n     [routerLinkActiveOptions]=\"{ exact: true }\">Dashboard</a>\r\n  <a class=\"nav-link\" [routerLink]=\"'posts'\" routerLinkActive=\"active\">Posts</a>\r\n  <a class=\"nav-link\" [routerLink]=\"'albums'\" routerLinkActive=\"active\">Albums</a>\r\n  <a class=\"nav-link\" [routerLink]=\"'photos'\" routerLinkActive=\"active\">Photos</a>\r\n</nav>\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { ApplicationRef, enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\nimport { devTools } from '@ngneat/elf-devtools';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .then((moduleRef) => {\n    if (!environment.production) {\n      devTools({\n        name: 'Elf demo',\n        postTimelineUpdate: () => moduleRef.injector.get(ApplicationRef).tick(),\n      });\n    }\n  })\n  .catch((err) => console.error(err));\n"],"names":[],"sourceRoot":"webpack:///"}